function [F, T] = LQR_3D(relative_state_chaser, dt, m)
    % Initial Conditions 
    % x0 = [3;  % position x [m]
    %       0;  % position y [m]
    %       0;  % position z [m]
    %       1;  % velocity x [m/s]
    %       0;  % velocity y [m/s]
    %       1]; % velocity z [m/s]
    
    % X dot vector:
        % velocity x
        % velocity y
        % velocity y
        % acceleration x
        % acceleration y
        % acceleration y
    
    
    % System Dynamics
    A = [0    0   0   1  0  0; 
         0    0   0   0  1  0;
         0    0   0   0  0  1;
         0    0   0   0  0  0;
         0    0   0   0  0  0;
         0    0   0   0  0  0]; % pass through the velocity term and discard the position term
    B = [0    0   0; 
         0    0   0;
         0    0   0;
         1/m  0   0;
         0    1/m 0;
         0    0   1/m];
    C = eye(6);
    D = [0 0 0;
         0 0 0;
         0 0 0;
         0 0 0;
         0 0 0;
         0 0 0];
    
    % Control Law
    Q = [.1 0 0 0 0 0;  % Penalize x error
         0 .1 0 0 0 0;  % Penalize y error
         0 0 .1 0 0 0;  % Penalize z error
         0 0 0 1 0 0;  % Penalize x velocity
         0 0 0 0 1 0;  % Penalize y velocity
         0 0 0 0 0 1]; % Penalize z velocity
    R = [2 0 0;      % Penalize Fx
         0 2 0;      % Penalize Fy
         0 0 2];     % Penalize Fz
    K = lqr(A,B,Q,R);
    % 
    % Closed loop system
    sys_ss = ss((A - B*K), B, C, D);
    
    % Run response to initial condition
    % t = 0:0.005:50;
    % dt = 0.005;
    [y,~,~] = initial(sys_ss, x0, [0 dt]);
    
    
    % Total impulse
    % dt = (t(2)-t(1));
    F = m*diff(y(:,4:6))/dt;
    % Force_Plot(y, m, dt, t);
    % Trajectory_Plot(y);
    T = [0 0 0];
end